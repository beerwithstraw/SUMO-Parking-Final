{"version":3,"sources":["index.tsx"],"names":["React","Animated","View","Image","ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","NativeScreen","Component","render","active","activityState","style","enabled","rest","props","undefined","display","Screen","createAnimatedComponent","ScreenContainer","NativeScreenContainer","ScreenStack","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAgDC,KAAhD,QAA6D,cAA7D;AASA,cAAc,SAAd;AAEA,IAAIC,cAAc,GAAG,IAArB;AAEA,OAAO,SAASC,aAAT,CAAuBC,mBAAmB,GAAG,IAA7C,EAAyD;AAC9DF,EAAAA,cAAc,GAAGE,mBAAjB;AACD;AAED,OAAO,SAASC,cAAT,GAAmC;AACxC,SAAOH,cAAP;AACD;AAED,OAAO,MAAMI,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAAwD;AAC7DC,EAAAA,MAAM,GAAgB;AACpB,QAAI;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,aAAV;AAAyBC,MAAAA,KAAzB;AAAgCC,MAAAA,OAAO,GAAG,IAA1C;AAAgD,SAAGC;AAAnD,QAA4D,KAAKC,KAArE;;AACA,QAAIL,MAAM,KAAKM,SAAX,IAAwBL,aAAa,KAAKK,SAA9C,EAAyD;AACvDL,MAAAA,aAAa,GAAGD,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmB,CAAnC,CADuD,CACjB;AACvC;;AACD,wBACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLE,KADK,EAELT,cAAc,IAAIU,OAAlB,IAA6BF,aAAa,KAAK,CAA/C,GACI;AAAEM,QAAAA,OAAO,EAAE;AAAX,OADJ,GAEI,IAJC;AADT,OAOMH,IAPN,EADF;AAWD;;AAjB4D;AAoB/D,OAAO,MAAMI,MAAM,GAAGlB,QAAQ,CAACmB,uBAAT,CAAiCZ,YAAjC,CAAf;AAEP,OAAO,MAAMa,eAA0D,GAAGnB,IAAnE;AAEP,OAAO,MAAMoB,qBAAgE,GAAGpB,IAAzE;AAEP,OAAO,MAAMqB,WAAkD,GAAGrB,IAA3D;AAEP,OAAO,MAAMsB,gCAAgC,GAC3CR,KAD8C,iBAG9C,oBAAC,IAAD,qBACE,oBAAC,KAAD;AAAO,EAAA,UAAU,EAAC,QAAlB;AAA2B,EAAA,YAAY,EAAE;AAAzC,GAAgDA,KAAhD,EADF,CAHK;AAQP,OAAO,MAAMS,0BAA0B,GACrCT,KADwC,iBAExB,oBAAC,IAAD,EAAUA,KAAV,CAFX;AAIP,OAAO,MAAMU,yBAAyB,GACpCV,KADuC,iBAEvB,oBAAC,IAAD,EAAUA,KAAV,CAFX;AAIP,OAAO,MAAMW,2BAA2B,GACtCX,KADyC,iBAEzB,oBAAC,IAAD,EAAUA,KAAV,CAFX;AAIP,OAAO,MAAMY,uBAA0E,GAAG1B,IAAnF;AAEP,OAAO,MAAM2B,wBAEX,GAAG3B,IAFE;AAIP,OAAO,MAAM4B,sBAAsB,GAAG,IAA/B","sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n} from './types';\n\nexport * from './types';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let { active, activityState, style, enabled = true, ...rest } = this.props;\n    if (active !== undefined && activityState === undefined) {\n      activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n    }\n    return (\n      <View\n        style={[\n          style,\n          ENABLE_SCREENS && enabled && activityState !== 2\n            ? { display: 'none' }\n            : null,\n        ]}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]}