{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SUMOParking\\\\App\\\\node_modules\\\\react-native-elements\\\\dist\\\\slider\\\\Slider.js\",\n    _this2 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../config\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 40;\nvar TRACK_STYLE = Platform.select({\n  web: 0,\n  default: -1\n});\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n    useNativeDriver: false\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n    useNativeDriver: false\n  }\n};\n\nvar getBoundedValue = function getBoundedValue(value, maximumValue, minimumValue) {\n  return Math.max(Math.min(value, maximumValue), minimumValue);\n};\n\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    _classCallCheck(this, Rect);\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n\n    _this.measureContainer = function (x) {\n      _this.handleMeasure('containerSize', x);\n    };\n\n    _this.measureTrack = function (x) {\n      _this.handleMeasure('trackSize', x);\n    };\n\n    _this.measureThumb = function (x) {\n      _this.handleMeasure('thumbSize', x);\n    };\n\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props.value, props.maximumValue, props.minimumValue))\n    };\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onPanResponderGrant: _this.handlePanResponderGrant.bind(_assertThisInitialized(_this)),\n      onPanResponderMove: _this.handlePanResponderMove.bind(_assertThisInitialized(_this)),\n      onPanResponderRelease: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminate: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this))\n    });\n    _this.isVertical = props.orientation === 'vertical';\n\n    _this.componentDidUpdate(props, true);\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, force) {\n      var newValue = getBoundedValue(this.props.value, this.props.maximumValue, this.props.minimumValue);\n\n      if (prevProps.value !== newValue || force) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      if (!TRACK_STYLE) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      if (!this.props.allowTouchTrack) {\n        return this.thumbHitTest(e);\n      }\n\n      this.setCurrentValue(this.getOnTouchValue(e));\n      this.fireChangeEvent('onValueChange');\n      return true;\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getOnTouchValue\",\n    value: function getOnTouchValue(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var location = this.isVertical ? nativeEvent.locationY : nativeEvent.locationX;\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getValueForTouch\",\n    value: function getValueForTouch(location) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var ratio = location / length;\n      var newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n\n      if (this.props.step) {\n        newValue = Math.round(newValue / this.props.step) * this.props.step;\n      }\n\n      return getBoundedValue(newValue + this.props.minimumValue, this.props.maximumValue, this.props.minimumValue);\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var _this$state = this.state,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured,\n          containerSize = _this$state.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var size = {};\n\n      if (allMeasured === true) {\n        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n          width = _this$getTouchOverflo.width,\n          height = _this$getTouchOverflo.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          layoutWidth = _x$nativeEvent$layout.width,\n          layoutHeight = _x$nativeEvent$layout.height;\n      var width = this.isVertical ? layoutHeight : layoutWidth;\n      var height = this.isVertical ? layoutWidth : layoutHeight;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      this[storeName] = size;\n\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var location = this._previousLeft + (this.isVertical ? gestureState.dy : gestureState.dx);\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var _this$state2 = this.state,\n          thumbSize = _this$state2.thumbSize,\n          containerSize = _this$state2.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      var height = touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2;\n      var width = touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2;\n\n      if (this.isVertical) {\n        return new Rect(height, width, thumbTouchSize.width, thumbTouchSize.height);\n      }\n\n      return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return React.createElement(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"getMinimumTrackStyles\",\n    value: function getMinimumTrackStyles(thumbStart) {\n      var _this$state3 = this.state,\n          thumbSize = _this$state3.thumbSize,\n          trackSize = _this$state3.trackSize;\n      var minimumTrackStyle = {\n        position: 'absolute'\n      };\n\n      if (this.isVertical) {\n        minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n        minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n      } else {\n        minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n        minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n      }\n\n      return minimumTrackStyle;\n    }\n  }, {\n    key: \"getThumbPositionStyles\",\n    value: function getThumbPositionStyles(thumbStart) {\n      return [_defineProperty({}, this.isVertical ? 'translateY' : 'translateX', thumbStart)];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          minimumValue = _a.minimumValue,\n          maximumValue = _a.maximumValue,\n          minimumTrackTintColor = _a.minimumTrackTintColor,\n          maximumTrackTintColor = _a.maximumTrackTintColor,\n          thumbTintColor = _a.thumbTintColor,\n          containerStyle = _a.containerStyle,\n          style = _a.style,\n          trackStyle = _a.trackStyle,\n          thumbStyle = _a.thumbStyle,\n          thumbProps = _a.thumbProps,\n          debugTouchArea = _a.debugTouchArea,\n          other = __rest(_a, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"thumbProps\", \"debugTouchArea\"]);\n\n      var _this$state4 = this.state,\n          value = _this$state4.value,\n          containerSize = _this$state4.containerSize,\n          thumbSize = _this$state4.thumbSize,\n          allMeasured = _this$state4.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n      var thumbStart = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.height = 0;\n        valueVisibleStyle.width = 0;\n      }\n\n      var minimumTrackStyle = _extends(_extends(_extends({}, this.getMinimumTrackStyles(thumbStart)), {\n        backgroundColor: minimumTrackTintColor\n      }), valueVisibleStyle);\n\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return React.createElement(View, _extends({}, other, {\n        style: StyleSheet.flatten([this.isVertical ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n        onLayout: this.measureContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, {\n          backgroundColor: maximumTrackTintColor\n        }]),\n        onLayout: this.measureTrack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, minimumTrackStyle]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }\n      }), React.createElement(SliderThumb, _extends({\n        isVisible: allMeasured,\n        onLayout: this.measureThumb.bind(this),\n        style: thumbStyle,\n        color: thumbTintColor,\n        start: thumbStart,\n        vertical: this.isVertical\n      }, thumbProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }\n      })), React.createElement(View, _extends({\n        style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n      }, this.panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));\n    }\n  }]);\n\n  return Slider;\n}(React.Component);\n\nvar SliderThumb = function SliderThumb(_a) {\n  var Component = _a.Component,\n      isVisible = _a.isVisible,\n      onLayout = _a.onLayout,\n      style = _a.style,\n      start = _a.start,\n      color = _a.color,\n      vertical = _a.vertical,\n      props = __rest(_a, [\"Component\", \"isVisible\", \"onLayout\", \"style\", \"start\", \"color\", \"vertical\"]);\n\n  var ThumbComponent = Component || Animated.View;\n  var axis = vertical ? 'translateY' : 'translateX';\n  var thumbPosition = [_defineProperty({}, axis, start)];\n  var styleTransform = style && style.transform || [];\n  var visibleStyle = isVisible ? {} : {\n    height: 0,\n    width: 0\n  };\n  return React.createElement(ThumbComponent, _extends({\n    testID: \"sliderThumb\",\n    onLayout: onLayout,\n    style: StyleSheet.flatten([_extends({\n      backgroundColor: color,\n      transform: [].concat(thumbPosition, _toConsumableArray(styleTransform))\n    }, visibleStyle), styles.thumb, style])\n  }, props, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }));\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  allowTouchTrack: false,\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: THUMB_SIZE,\n    height: THUMB_SIZE\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"sources":["C:/Users/hp/Desktop/SUMOParking/App/node_modules/react-native-elements/dist/slider/Slider.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","withTheme","TRACK_SIZE","THUMB_SIZE","TRACK_STYLE","Platform","select","web","default","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","useNativeDriver","timing","duration","easing","Easing","inOut","ease","delay","getBoundedValue","value","maximumValue","minimumValue","Math","max","min","Rect","x","y","width","height","Slider","props","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","isVertical","orientation","componentDidUpdate","prevProps","force","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","containsPoint","locationX","locationY","allowTouchTrack","thumbHitTest","getOnTouchValue","event","location","getValueForTouch","ratio","step","round","thumbTouchSize","size","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","layoutWidth","layoutHeight","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","dy","dx","__getValue","getRatio","touchOverflowSize","thumbLeft","positionStyle","left","top","thumbStart","minimumTrackStyle","position","add","_a","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","thumbProps","other","mainStyles","styles","appliedTrackStyle","StyleSheet","flatten","track","interpolate","inputRange","outputRange","valueVisibleStyle","getMinimumTrackStyles","getTouchOverflowStyle","containerVertical","containerHorizontal","trackVertical","trackHorizontal","touchArea","panHandlers","renderDebugThumbTouchRect","Component","SliderThumb","isVisible","onLayout","color","vertical","ThumbComponent","View","axis","thumbPosition","styleTransform","transform","visibleStyle","thumb","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,CAAT,IAAcH,CAAd;AAAiB,QAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,CAArC,EAAwCG,CAAxC,KAA8CF,CAAC,CAACO,OAAF,CAAUL,CAAV,IAAe,CAAjE,EACbD,CAAC,CAACC,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAR;AADJ;;AAEA,MAAIH,CAAC,IAAI,IAAL,IAAa,OAAOI,MAAM,CAACK,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWP,CAAC,GAAGC,MAAM,CAACK,qBAAP,CAA6BT,CAA7B,CAApB,EAAqDU,CAAC,GAAGP,CAAC,CAACQ,MAA3D,EAAmED,CAAC,EAApE,EAAwE;AACpE,QAAIT,CAAC,CAACO,OAAF,CAAUL,CAAC,CAACO,CAAD,CAAX,IAAkB,CAAlB,IAAuBN,MAAM,CAACC,SAAP,CAAiBO,oBAAjB,CAAsCL,IAAtC,CAA2CP,CAA3C,EAA8CG,CAAC,CAACO,CAAD,CAA/C,CAA3B,EACIR,CAAC,CAACC,CAAC,CAACO,CAAD,CAAF,CAAD,GAAUV,CAAC,CAACG,CAAC,CAACO,CAAD,CAAF,CAAX;AACP;AACL,SAAOR,CAAP;AACH,CAVD;;AAYA,OAAOW,KAAP,MAAkB,OAAlB;;;;;;;AAEA,SAASC,SAAT;AACA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,WAAW,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,OAAO,EAAE,CAAC;AAApB,CAAhB,CAApB;AACA,IAAMC,yBAAyB,GAAG;AAC9BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE,CADN;AAEJC,IAAAA,OAAO,EAAE,GAFL;AAGJC,IAAAA,eAAe,EAAE;AAHb,GADsB;AAM9BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,MAAM,EAAEC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACE,IAApB,CAFJ;AAGJC,IAAAA,KAAK,EAAE,CAHH;AAIJP,IAAAA,eAAe,EAAE;AAJb;AANsB,CAAlC;;AAaA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,YAAR,EAAsBC,YAAtB;AAAA,SAAuCC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,KAAT,EAAgBC,YAAhB,CAAT,EAAwCC,YAAxC,CAAvC;AAAA,CAAxB;;IACMI,I;AACF,gBAAYC,CAAZ,EAAeC,CAAf,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAAA;;AAC7B,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;;;WACD,uBAAcH,CAAd,EAAiBC,CAAjB,EAAoB;AAChB,aAAQD,CAAC,IAAI,KAAKA,CAAV,IACJC,CAAC,IAAI,KAAKA,CADN,IAEJD,CAAC,IAAI,KAAKA,CAAL,GAAS,KAAKE,KAFf,IAGJD,CAAC,IAAI,KAAKA,CAAL,GAAS,KAAKE,MAHvB;AAIH;;;;;;IAECC,M;;;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AACA,UAAKC,gBAAL,GAAwB,UAACN,CAAD,EAAO;AAC3B,YAAKO,aAAL,CAAmB,eAAnB,EAAoCP,CAApC;AACH,KAFD;;AAGA,UAAKQ,YAAL,GAAoB,UAACR,CAAD,EAAO;AACvB,YAAKO,aAAL,CAAmB,WAAnB,EAAgCP,CAAhC;AACH,KAFD;;AAGA,UAAKS,YAAL,GAAoB,UAACT,CAAD,EAAO;AACvB,YAAKO,aAAL,CAAmB,WAAnB,EAAgCP,CAAhC;AACH,KAFD;;AAGA,UAAKU,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE;AAAET,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OADN;AAETS,MAAAA,SAAS,EAAE;AAAEV,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFF;AAGTU,MAAAA,SAAS,EAAE;AAAEX,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAHF;AAITW,MAAAA,WAAW,EAAE,KAJJ;AAKTrB,MAAAA,KAAK,EAAE,IAAIsB,QAAQ,CAACC,KAAb,CAAmBxB,eAAe,CAACa,KAAK,CAACZ,KAAP,EAAcY,KAAK,CAACX,YAApB,EAAkCW,KAAK,CAACV,YAAxC,CAAlC;AALE,KAAb;AAOA,UAAKsB,YAAL,GAAoBC,YAAY,CAACC,MAAb,CAAoB;AACpCC,MAAAA,4BAA4B,EAAE,MAAKC,gCAAL,CAAsCC,IAAtC,+BADM;AAEpCC,MAAAA,2BAA2B,EAAE,MAAKC,+BAAL,CAAqCF,IAArC,+BAFO;AAGpCG,MAAAA,mBAAmB,EAAE,MAAKC,uBAAL,CAA6BJ,IAA7B,+BAHe;AAIpCK,MAAAA,kBAAkB,EAAE,MAAKC,sBAAL,CAA4BN,IAA5B,+BAJgB;AAKpCO,MAAAA,qBAAqB,EAAE,MAAKC,qBAAL,CAA2BR,IAA3B,+BALa;AAMpCS,MAAAA,gCAAgC,EAAE,MAAKC,4BAAL,CAAkCV,IAAlC,+BANE;AAOpCW,MAAAA,uBAAuB,EAAE,MAAKH,qBAAL,CAA2BR,IAA3B;AAPW,KAApB,CAApB;AASA,UAAKY,UAAL,GAAkB7B,KAAK,CAAC8B,WAAN,KAAsB,UAAxC;;AACA,UAAKC,kBAAL,CAAwB/B,KAAxB,EAA+B,IAA/B;;AA5Be;AA6BlB;;;;WACD,4BAAmBgC,SAAnB,EAA8BC,KAA9B,EAAqC;AACjC,UAAMC,QAAQ,GAAG/C,eAAe,CAAC,KAAKa,KAAL,CAAWZ,KAAZ,EAAmB,KAAKY,KAAL,CAAWX,YAA9B,EAA4C,KAAKW,KAAL,CAAWV,YAAvD,CAAhC;;AACA,UAAI0C,SAAS,CAAC5C,KAAV,KAAoB8C,QAApB,IAAgCD,KAApC,EAA2C;AACvC,YAAI,KAAKjC,KAAL,CAAWmC,kBAAf,EAAmC;AAC/B,eAAKC,uBAAL,CAA6BF,QAA7B;AACH,SAFD,MAGK;AACD,eAAKG,eAAL,CAAqBH,QAArB;AACH;AACJ;AACJ;;;WACD,yBAAgB9C,KAAhB,EAAuB;AACnB,WAAKiB,KAAL,CAAWjB,KAAX,CAAiBkD,QAAjB,CAA0BlD,KAA1B;AACH;;;WACD,iCAAwBA,KAAxB,EAA+B;AAAA,UACnBmD,aADmB,GACD,KAAKvC,KADJ,CACnBuC,aADmB;;AAE3B,UAAMC,eAAe,GAAG,SAAc,EAAd,EAAkBjE,yBAAyB,CAACgE,aAAD,CAA3C,EAA4D,KAAKvC,KAAL,CAAWwC,eAAvE,EAAwF;AAC5GC,QAAAA,OAAO,EAAErD;AADmG,OAAxF,CAAxB;;AAGAsB,MAAAA,QAAQ,CAAC6B,aAAD,CAAR,CAAwB,KAAKlC,KAAL,CAAWjB,KAAnC,EAA0CoD,eAA1C,EAA2DE,KAA3D;AACH;;;WACD,2CAAkC;AAE9B,UAAI,CAACxE,WAAL,EAAkB;AACd,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;WACD,mCAA0B;AACtB,WAAKyE,aAAL,GAAqB,KAAKC,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CAArB;AACA,WAAKC,eAAL,CAAqB,gBAArB;AACH;;;WACD,gCAAuBC,CAAvB,EAA0BC,YAA1B,EAAwC;AACpC,UAAI,KAAKhD,KAAL,CAAWiD,QAAf,EAAyB;AACrB;AACH;;AACD,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,eAArB;AACH;;;WACD,wCAA+B;AAE3B,aAAO,KAAP;AACH;;;WACD,+BAAsBC,CAAtB,EAAyBC,YAAzB,EAAuC;AACnC,UAAI,KAAKhD,KAAL,CAAWiD,QAAf,EAAyB;AACrB;AACH;;AACD,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,mBAArB;AACH;;;WACD,4BAA8B;AAAA,UAAfK,WAAe,QAAfA,WAAe;AAC1B,UAAMC,cAAc,GAAG,KAAKC,iBAAL,EAAvB;AACA,aAAOD,cAAc,CAACE,aAAf,CAA6BH,WAAW,CAACI,SAAzC,EAAoDJ,WAAW,CAACK,SAAhE,CAAP;AACH;;;WACD,0CAAiCtG,CAAjC,EAA+D;AAE3D,UAAI,CAAC,KAAK8C,KAAL,CAAWyD,eAAhB,EAAiC;AAC7B,eAAO,KAAKC,YAAL,CAAkBxG,CAAlB,CAAP;AACH;;AACD,WAAKmF,eAAL,CAAqB,KAAKsB,eAAL,CAAqBzG,CAArB,CAArB;AACA,WAAK4F,eAAL,CAAqB,eAArB;AACA,aAAO,IAAP;AACH;;;WACD,yBAAgBc,KAAhB,EAAuB;AACnB,UAAI,KAAK5D,KAAL,CAAW4D,KAAX,CAAJ,EAAuB;AACnB,aAAK5D,KAAL,CAAW4D,KAAX,EAAkB,KAAKf,eAAL,EAAlB;AACH;AACJ;;;WAED,gCAAiC;AAAA,UAAfM,WAAe,SAAfA,WAAe;AAC7B,UAAMU,QAAQ,GAAG,KAAKhC,UAAL,GACXsB,WAAW,CAACK,SADD,GAEXL,WAAW,CAACI,SAFlB;AAGA,aAAO,KAAKO,gBAAL,CAAsBD,QAAtB,CAAP;AACH;;;WACD,0BAAiBA,QAAjB,EAA2B;AACvB,UAAMjG,MAAM,GAAG,KAAKyC,KAAL,CAAWC,aAAX,CAAyBT,KAAzB,GAAiC,KAAKQ,KAAL,CAAWG,SAAX,CAAqBX,KAArE;AACA,UAAMkE,KAAK,GAAGF,QAAQ,GAAGjG,MAAzB;AACA,UAAIsE,QAAQ,GAAG6B,KAAK,IAAI,KAAK/D,KAAL,CAAWX,YAAX,GAA0B,KAAKW,KAAL,CAAWV,YAAzC,CAApB;;AACA,UAAI,KAAKU,KAAL,CAAWgE,IAAf,EAAqB;AACjB9B,QAAAA,QAAQ,GAAG3C,IAAI,CAAC0E,KAAL,CAAW/B,QAAQ,GAAG,KAAKlC,KAAL,CAAWgE,IAAjC,IAAyC,KAAKhE,KAAL,CAAWgE,IAA/D;AACH;;AACD,aAAO7E,eAAe,CAAC+C,QAAQ,GAAG,KAAKlC,KAAL,CAAWV,YAAvB,EAAqC,KAAKU,KAAL,CAAWX,YAAhD,EAA8D,KAAKW,KAAL,CAAWV,YAAzE,CAAtB;AACH;;;WACD,gCAAuB;AAAA,wBAC+B,KAAKe,KADpC;AAAA,UACXG,SADW,eACXA,SADW;AAAA,UACAC,WADA,eACAA,WADA;AAAA,UACaH,aADb,eACaA,aADb;AAAA,UAEX4D,cAFW,GAEQ,KAAKlE,KAFb,CAEXkE,cAFW;AAGnB,UAAMC,IAAI,GAAG,EAAb;;AACA,UAAI1D,WAAW,KAAK,IAApB,EAA0B;AACtB0D,QAAAA,IAAI,CAACtE,KAAL,GAAaN,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY0E,cAAc,CAACrE,KAAf,GAAuBW,SAAS,CAACX,KAA7C,CAAb;AACAsE,QAAAA,IAAI,CAACrE,MAAL,GAAcP,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY0E,cAAc,CAACpE,MAAf,GAAwBQ,aAAa,CAACR,MAAlD,CAAd;AACH;;AACD,aAAOqE,IAAP;AACH;;;WACD,iCAAwB;AAAA,kCACM,KAAKC,oBAAL,EADN;AAAA,UACZvE,KADY,yBACZA,KADY;AAAA,UACLC,MADK,yBACLA,MADK;;AAEpB,UAAMuE,kBAAkB,GAAG,EAA3B;;AACA,UAAIxE,KAAK,KAAKyE,SAAV,IAAuBxE,MAAM,KAAKwE,SAAtC,EAAiD;AAC7C,YAAMC,cAAc,GAAG,CAACzE,MAAD,GAAU,CAAjC;AACAuE,QAAAA,kBAAkB,CAACG,SAAnB,GAA+BD,cAA/B;AACAF,QAAAA,kBAAkB,CAACI,YAAnB,GAAkCF,cAAlC;AACA,YAAMG,gBAAgB,GAAG,CAAC7E,KAAD,GAAS,CAAlC;AACAwE,QAAAA,kBAAkB,CAACM,UAAnB,GAAgCD,gBAAhC;AACAL,QAAAA,kBAAkB,CAACO,WAAnB,GAAiCF,gBAAjC;AACH;;AACD,UAAI,KAAK1E,KAAL,CAAW6E,cAAX,KAA8B,IAAlC,EAAwC;AACpCR,QAAAA,kBAAkB,CAACS,eAAnB,GAAqC,QAArC;AACAT,QAAAA,kBAAkB,CAACU,OAAnB,GAA6B,GAA7B;AACH;;AACD,aAAOV,kBAAP;AACH;;;WACD,uBAAcW,IAAd,EAAoBrF,CAApB,EAAuB;AAAA,kCACkCA,CAAC,CAACwD,WAAF,CAAc8B,MADhD;AAAA,UACJC,WADI,yBACXrF,KADW;AAAA,UACiBsF,YADjB,yBACSrF,MADT;AAEnB,UAAMD,KAAK,GAAG,KAAKgC,UAAL,GAAkBsD,YAAlB,GAAiCD,WAA/C;AACA,UAAMpF,MAAM,GAAG,KAAK+B,UAAL,GAAkBqD,WAAlB,GAAgCC,YAA/C;AACA,UAAMhB,IAAI,GAAG;AAAEtE,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA;AAAT,OAAb;AACA,UAAMsF,SAAS,SAAOJ,IAAtB;AACA,UAAMK,WAAW,GAAG,KAAKD,SAAL,CAApB;;AACA,UAAIC,WAAW,IACXxF,KAAK,KAAKwF,WAAW,CAACxF,KADtB,IAEAC,MAAM,KAAKuF,WAAW,CAACvF,MAF3B,EAEmC;AAC/B;AACH;;AACD,WAAKsF,SAAL,IAAkBjB,IAAlB;;AACA,UAAI,KAAKmB,cAAL,IAAuB,KAAKC,UAA5B,IAA0C,KAAKC,UAAnD,EAA+D;AAC3D,aAAKC,QAAL,CAAc;AACVnF,UAAAA,aAAa,EAAE,KAAKgF,cADV;AAEV/E,UAAAA,SAAS,EAAE,KAAKgF,UAFN;AAGV/E,UAAAA,SAAS,EAAE,KAAKgF,UAHN;AAIV/E,UAAAA,WAAW,EAAE;AAJH,SAAd;AAMH;AACJ;;;WACD,kBAASuC,YAAT,EAAuB;AACnB,UAAMa,QAAQ,GAAG,KAAKlB,aAAL,IACZ,KAAKd,UAAL,GAAkBmB,YAAY,CAAC0C,EAA/B,GAAoC1C,YAAY,CAAC2C,EADrC,CAAjB;AAEA,aAAO,KAAK7B,gBAAL,CAAsBD,QAAtB,CAAP;AACH;;;WACD,2BAAkB;AACd,aAAO,KAAKxD,KAAL,CAAWjB,KAAX,CAAiBwG,UAAjB,EAAP;AACH;;;WACD,kBAASxG,KAAT,EAAgB;AACZ,aAAQ,CAACA,KAAK,GAAG,KAAKY,KAAL,CAAWV,YAApB,KACH,KAAKU,KAAL,CAAWX,YAAX,GAA0B,KAAKW,KAAL,CAAWV,YADlC,CAAR;AAEH;;;WACD,sBAAaF,KAAb,EAAoB;AAChB,UAAM2E,KAAK,GAAG,KAAK8B,QAAL,CAAczG,KAAd,CAAd;AACA,aAAQ2E,KAAK,IAAI,KAAK1D,KAAL,CAAWC,aAAX,CAAyBT,KAAzB,GAAiC,KAAKQ,KAAL,CAAWG,SAAX,CAAqBX,KAA1D,CAAb;AACH;;;WACD,6BAAoB;AAAA,yBACqB,KAAKQ,KAD1B;AAAA,UACRG,SADQ,gBACRA,SADQ;AAAA,UACGF,aADH,gBACGA,aADH;AAAA,UAER4D,cAFQ,GAEW,KAAKlE,KAFhB,CAERkE,cAFQ;AAGhB,UAAM4B,iBAAiB,GAAG,KAAK1B,oBAAL,EAA1B;AACA,UAAMtE,MAAM,GAAGgG,iBAAiB,CAAChG,MAAlB,GAA2B,CAA3B,GACX,CAACQ,aAAa,CAACR,MAAd,GAAuBoE,cAAc,CAACpE,MAAvC,IAAiD,CADrD;AAEA,UAAMD,KAAK,GAAGiG,iBAAiB,CAACjG,KAAlB,GAA0B,CAA1B,GACV,KAAK+C,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CADU,GAEV,CAACrC,SAAS,CAACX,KAAV,GAAkBqE,cAAc,CAACrE,KAAlC,IAA2C,CAF/C;;AAGA,UAAI,KAAKgC,UAAT,EAAqB;AACjB,eAAO,IAAInC,IAAJ,CAASI,MAAT,EAAiBD,KAAjB,EAAwBqE,cAAc,CAACrE,KAAvC,EAA8CqE,cAAc,CAACpE,MAA7D,CAAP;AACH;;AACD,aAAO,IAAIJ,IAAJ,CAASG,KAAT,EAAgBC,MAAhB,EAAwBoE,cAAc,CAACrE,KAAvC,EAA8CqE,cAAc,CAACpE,MAA7D,CAAP;AACH;;;WACD,mCAA0BiG,SAA1B,EAAqC;AACjC,UAAM3C,cAAc,GAAG,KAAKC,iBAAL,EAAvB;AACA,UAAM2C,aAAa,GAAG;AAClBC,QAAAA,IAAI,EAAEF,SADY;AAElBG,QAAAA,GAAG,EAAE9C,cAAc,CAACxD,CAFF;AAGlBC,QAAAA,KAAK,EAAEuD,cAAc,CAACvD,KAHJ;AAIlBC,QAAAA,MAAM,EAAEsD,cAAc,CAACtD;AAJL,OAAtB;AAMA,aAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAEkG,aAAtB;AAAqC,QAAA,aAAa,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;WACD,+BAAsBG,UAAtB,EAAkC;AAAA,yBACG,KAAK9F,KADR;AAAA,UACtBG,SADsB,gBACtBA,SADsB;AAAA,UACXD,SADW,gBACXA,SADW;AAE9B,UAAM6F,iBAAiB,GAAG;AACtBC,QAAAA,QAAQ,EAAE;AADY,OAA1B;;AAGA,UAAI,KAAKxE,UAAT,EAAqB;AACjBuE,QAAAA,iBAAiB,CAACtG,MAAlB,GAA2BY,QAAQ,CAAC4F,GAAT,CAAaH,UAAb,EAAyB3F,SAAS,CAACV,MAAV,GAAmB,CAA5C,CAA3B;AACAsG,QAAAA,iBAAiB,CAACzB,UAAlB,GAA+BpE,SAAS,CAACV,KAAV,GAAkB3B,WAAjD;AACH,OAHD,MAIK;AACDkI,QAAAA,iBAAiB,CAACvG,KAAlB,GAA0Ba,QAAQ,CAAC4F,GAAT,CAAaH,UAAb,EAAyB3F,SAAS,CAACX,KAAV,GAAkB,CAA3C,CAA1B;AACAuG,QAAAA,iBAAiB,CAAC5B,SAAlB,GAA8BjE,SAAS,CAACT,MAAV,GAAmB5B,WAAjD;AACH;;AACD,aAAOkI,iBAAP;AACH;;;WACD,gCAAuBD,UAAvB,EAAmC;AAC/B,aAAO,qBAAI,KAAKtE,UAAL,GAAkB,YAAlB,GAAiC,YAArC,EAAoDsE,UAApD,EAAP;AACH;;;WACD,kBAAS;AACC,UAAAI,EAAE,GAAG,KAAKvG,KAAV;AAAA,UAAmBV,YAAnB,GAA2LiH,EAA3L,CAAmBjH,YAAnB;AAAA,UAAiCD,YAAjC,GAA2LkH,EAA3L,CAAiClH,YAAjC;AAAA,UAA+CmH,qBAA/C,GAA2LD,EAA3L,CAA+CC,qBAA/C;AAAA,UAAsEC,qBAAtE,GAA2LF,EAA3L,CAAsEE,qBAAtE;AAAA,UAA6FC,cAA7F,GAA2LH,EAA3L,CAA6FG,cAA7F;AAAA,UAA6GC,cAA7G,GAA2LJ,EAA3L,CAA6GI,cAA7G;AAAA,UAA6HC,KAA7H,GAA2LL,EAA3L,CAA6HK,KAA7H;AAAA,UAAoIC,UAApI,GAA2LN,EAA3L,CAAoIM,UAApI;AAAA,UAAgJC,UAAhJ,GAA2LP,EAA3L,CAAgJO,UAAhJ;AAAA,UAA4JC,UAA5J,GAA2LR,EAA3L,CAA4JQ,UAA5J;AAAA,UAAwKlC,cAAxK,GAA2L0B,EAA3L,CAAwK1B,cAAxK;AAAA,UAA+LmC,KAA/L,GAAuMhK,MAAM,CAACuJ,EAAD,EAAK,CAAC,cAAD,EAAiB,cAAjB,EAAiC,uBAAjC,EAA0D,uBAA1D,EAAmF,gBAAnF,EAAqG,gBAArG,EAAuH,OAAvH,EAAgI,YAAhI,EAA8I,YAA9I,EAA4J,YAA5J,EAA0K,gBAA1K,CAAL,CAA7M;;AADD,yBAEoD,KAAKlG,KAFzD;AAAA,UAEGjB,KAFH,gBAEGA,KAFH;AAAA,UAEUkB,aAFV,gBAEUA,aAFV;AAAA,UAEyBE,SAFzB,gBAEyBA,SAFzB;AAAA,UAEoCC,WAFpC,gBAEoCA,WAFpC;AAGL,UAAMwG,UAAU,GAAGN,cAAc,IAAIO,MAArC;AACA,UAAMC,iBAAiB,GAAGC,UAAU,CAACC,OAAX,CAAmB,CAACH,MAAM,CAACI,KAAR,EAAeT,UAAf,CAAnB,CAA1B;AACA,UAAMV,UAAU,GAAG/G,KAAK,CAACmI,WAAN,CAAkB;AACjCC,QAAAA,UAAU,EAAE,CAAClI,YAAD,EAAeD,YAAf,CADqB;AAEjCoI,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAInH,aAAa,CAACT,KAAd,GAAsBW,SAAS,CAACX,KAApC;AAFoB,OAAlB,CAAnB;AAIA,UAAM6H,iBAAiB,GAAG,EAA1B;;AACA,UAAI,CAACjH,WAAL,EAAkB;AACdiH,QAAAA,iBAAiB,CAAC5H,MAAlB,GAA2B,CAA3B;AACA4H,QAAAA,iBAAiB,CAAC7H,KAAlB,GAA0B,CAA1B;AACH;;AACD,UAAMuG,iBAAiB,GAAG,SAAc,SAAc,SAAc,EAAd,EAAkB,KAAKuB,qBAAL,CAA2BxB,UAA3B,CAAlB,CAAd,EAAyE;AAAErB,QAAAA,eAAe,EAAE0B;AAAnB,OAAzE,CAAd,EAAoIkB,iBAApI,CAA1B;;AACA,UAAMrD,kBAAkB,GAAG,KAAKuD,qBAAL,EAA3B;AACA,aAAQ,oBAAC,IAAD,eAAUZ,KAAV;AAAiB,QAAA,KAAK,EAAEI,UAAU,CAACC,OAAX,CAAmB,CAC3C,KAAKxF,UAAL,GACMoF,UAAU,CAACY,iBADjB,GAEMZ,UAAU,CAACa,mBAH0B,EAI3ClB,KAJ2C,CAAnB,CAAxB;AAKA,QAAA,QAAQ,EAAE,KAAK3G,gBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMR,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEmH,UAAU,CAACC,OAAX,CAAmB,CACxBJ,UAAU,CAACK,KADa,EAExB,KAAKzF,UAAL,GACMoF,UAAU,CAACc,aADjB,GAEMd,UAAU,CAACe,eAJO,EAKxBb,iBALwB,EAMxB;AAAErC,UAAAA,eAAe,EAAE2B;AAAnB,SANwB,CAAnB,CAAb;AAOQ,QAAA,QAAQ,EAAE,KAAKtG,YAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANQ,EAcR,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAEiH,UAAU,CAACC,OAAX,CAAmB,CACjCJ,UAAU,CAACK,KADsB,EAEjC,KAAKzF,UAAL,GACMoF,UAAU,CAACc,aADjB,GAEMd,UAAU,CAACe,eAJgB,EAKjCb,iBALiC,EAMjCf,iBANiC,CAAnB,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdQ,EAsBR,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAE3F,WAAxB;AAAqC,QAAA,QAAQ,EAAE,KAAKL,YAAL,CAAkBa,IAAlB,CAAuB,IAAvB,CAA/C;AAA6E,QAAA,KAAK,EAAE6F,UAApF;AAAgG,QAAA,KAAK,EAAEJ,cAAvG;AAAuH,QAAA,KAAK,EAAEP,UAA9H;AAA0I,QAAA,QAAQ,EAAE,KAAKtE;AAAzJ,SAAyKkF,UAAzK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtBQ,EAuBR,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEK,UAAU,CAACC,OAAX,CAAmB,CAACH,MAAM,CAACe,SAAR,EAAmB5D,kBAAnB,CAAnB;AAAb,SAA6E,KAAKzD,YAAL,CAAkBsH,WAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGrD,cAAc,KAAK,IAAnB,IACK,KAAKsD,yBAAL,CAA+BhC,UAA/B,CAFR,CAvBQ,CAAR;AA4BH;;;;EA1QgBrI,KAAK,CAACsK,S;;AA4Q3B,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAC9B,EAAD,EAAQ;AAAA,MAClB6B,SADkB,GACgD7B,EADhD,CAClB6B,SADkB;AAAA,MACPE,SADO,GACgD/B,EADhD,CACP+B,SADO;AAAA,MACIC,QADJ,GACgDhC,EADhD,CACIgC,QADJ;AAAA,MACc3B,KADd,GACgDL,EADhD,CACcK,KADd;AAAA,MACqBlE,KADrB,GACgD6D,EADhD,CACqB7D,KADrB;AAAA,MAC4B8F,KAD5B,GACgDjC,EADhD,CAC4BiC,KAD5B;AAAA,MACmCC,QADnC,GACgDlC,EADhD,CACmCkC,QADnC;AAAA,MACoDzI,KADpD,GAC4DhD,MAAM,CAACuJ,EAAD,EAAK,CAAC,WAAD,EAAc,WAAd,EAA2B,UAA3B,EAAuC,OAAvC,EAAgD,OAAhD,EAAyD,OAAzD,EAAkE,UAAlE,CAAL,CADlE;;AAExB,MAAMmC,cAAc,GAAGN,SAAS,IAAI1H,QAAQ,CAACiI,IAA7C;AACA,MAAMC,IAAI,GAAGH,QAAQ,GAAG,YAAH,GAAkB,YAAvC;AACA,MAAMI,aAAa,GAAG,qBAAID,IAAJ,EAAWlG,KAAX,EAAtB;AACA,MAAMoG,cAAc,GAAIlC,KAAK,IAAIA,KAAK,CAACmC,SAAhB,IAA8B,EAArD;AACA,MAAMC,YAAY,GAAGV,SAAS,GAAG,EAAH,GAAQ;AAAExI,IAAAA,MAAM,EAAE,CAAV;AAAaD,IAAAA,KAAK,EAAE;AAApB,GAAtC;AACA,SAAQ,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAC,aAAvB;AAAqC,IAAA,QAAQ,EAAE0I,QAA/C;AAAyD,IAAA,KAAK,EAAEnB,UAAU,CAACC,OAAX,CAAmB,CACnF,SAAc;AAAEvC,MAAAA,eAAe,EAAE0D,KAAnB;AAA0BO,MAAAA,SAAS,YAAMF,aAAN,qBAAwBC,cAAxB;AAAnC,KAAd,EAA4FE,YAA5F,CADmF,EAEnF9B,MAAM,CAAC+B,KAF4E,EAGnFrC,KAHmF,CAAnB;AAAhE,KAII5G,KAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;AAKH,CAZD;;AAaAD,MAAM,CAACmJ,YAAP,GAAsB;AAClB9J,EAAAA,KAAK,EAAE,CADW;AAElBE,EAAAA,YAAY,EAAE,CAFI;AAGlBD,EAAAA,YAAY,EAAE,CAHI;AAIlB2E,EAAAA,IAAI,EAAE,CAJY;AAKlBwC,EAAAA,qBAAqB,EAAE,SALL;AAMlBC,EAAAA,qBAAqB,EAAE,SANL;AAOlBhD,EAAAA,eAAe,EAAE,KAPC;AAQlBiD,EAAAA,cAAc,EAAE,KARE;AASlBxC,EAAAA,cAAc,EAAE;AAAErE,IAAAA,KAAK,EAAE5B,UAAT;AAAqB6B,IAAAA,MAAM,EAAE7B;AAA7B,GATE;AAUlB4G,EAAAA,cAAc,EAAE,KAVE;AAWlBtC,EAAAA,aAAa,EAAE,QAXG;AAYlBT,EAAAA,WAAW,EAAE;AAZK,CAAtB;AAcA,IAAMoF,MAAM,GAAGE,UAAU,CAACtG,MAAX,CAAkB;AAC7BgH,EAAAA,mBAAmB,EAAE;AACjBhI,IAAAA,MAAM,EAAE,EADS;AAEjBqJ,IAAAA,cAAc,EAAE;AAFC,GADQ;AAK7BtB,EAAAA,iBAAiB,EAAE;AACfhI,IAAAA,KAAK,EAAE,EADQ;AAEfuJ,IAAAA,aAAa,EAAE,QAFA;AAGfC,IAAAA,UAAU,EAAE;AAHG,GALU;AAU7B/B,EAAAA,KAAK,EAAE;AACHgC,IAAAA,YAAY,EAAEtL,UAAU,GAAG;AADxB,GAVsB;AAa7BgK,EAAAA,eAAe,EAAE;AACblI,IAAAA,MAAM,EAAE9B;AADK,GAbY;AAgB7B+J,EAAAA,aAAa,EAAE;AACXwB,IAAAA,IAAI,EAAE,CADK;AAEX1J,IAAAA,KAAK,EAAE7B;AAFI,GAhBc;AAoB7BiL,EAAAA,KAAK,EAAE;AACH5C,IAAAA,QAAQ,EAAE,UADP;AAEHxG,IAAAA,KAAK,EAAE5B,UAFJ;AAGH6B,IAAAA,MAAM,EAAE7B,UAHL;AAIHqL,IAAAA,YAAY,EAAErL,UAAU,GAAG;AAJxB,GApBsB;AA0B7BgK,EAAAA,SAAS,EAAE;AACP5B,IAAAA,QAAQ,EAAE,UADH;AAEPvB,IAAAA,eAAe,EAAE,aAFV;AAGPoB,IAAAA,GAAG,EAAE,CAHE;AAIPD,IAAAA,IAAI,EAAE,CAJC;AAKPuD,IAAAA,KAAK,EAAE,CALA;AAMPC,IAAAA,MAAM,EAAE;AAND,GA1BkB;AAkC7BC,EAAAA,mBAAmB,EAAE;AACjBrD,IAAAA,QAAQ,EAAE,UADO;AAEjBvB,IAAAA,eAAe,EAAE,OAFA;AAGjBC,IAAAA,OAAO,EAAE;AAHQ;AAlCQ,CAAlB,CAAf;AAwCA,SAAShF,MAAT;AACA,eAAehC,SAAS,CAACgC,MAAD,EAAS,QAAT,CAAxB","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n// @ts-nocheck\nimport React from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder, Platform, } from 'react-native';\nimport { withTheme } from '../config';\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 40;\nconst TRACK_STYLE = Platform.select({ web: 0, default: -1 });\nconst DEFAULT_ANIMATION_CONFIGS = {\n    spring: {\n        friction: 7,\n        tension: 100,\n        useNativeDriver: false,\n    },\n    timing: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n        delay: 0,\n        useNativeDriver: false,\n    },\n};\nconst getBoundedValue = (value, maximumValue, minimumValue) => Math.max(Math.min(value, maximumValue), minimumValue);\nclass Rect {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    containsPoint(x, y) {\n        return (x >= this.x &&\n            y >= this.y &&\n            x <= this.x + this.width &&\n            y <= this.y + this.height);\n    }\n}\nclass Slider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.measureContainer = (x) => {\n            this.handleMeasure('containerSize', x);\n        };\n        this.measureTrack = (x) => {\n            this.handleMeasure('trackSize', x);\n        };\n        this.measureThumb = (x) => {\n            this.handleMeasure('thumbSize', x);\n        };\n        this.state = {\n            containerSize: { width: 0, height: 0 },\n            trackSize: { width: 0, height: 0 },\n            thumbSize: { width: 0, height: 0 },\n            allMeasured: false,\n            value: new Animated.Value(getBoundedValue(props.value, props.maximumValue, props.minimumValue)),\n        };\n        this.panResponder = PanResponder.create({\n            onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),\n            onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),\n            onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n            onPanResponderMove: this.handlePanResponderMove.bind(this),\n            onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n            onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),\n            onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n        });\n        this.isVertical = props.orientation === 'vertical';\n        this.componentDidUpdate(props, true);\n    }\n    componentDidUpdate(prevProps, force) {\n        const newValue = getBoundedValue(this.props.value, this.props.maximumValue, this.props.minimumValue);\n        if (prevProps.value !== newValue || force) {\n            if (this.props.animateTransitions) {\n                this.setCurrentValueAnimated(newValue);\n            }\n            else {\n                this.setCurrentValue(newValue);\n            }\n        }\n    }\n    setCurrentValue(value) {\n        this.state.value.setValue(value);\n    }\n    setCurrentValueAnimated(value) {\n        const { animationType } = this.props;\n        const animationConfig = Object.assign({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n            toValue: value,\n        });\n        Animated[animationType](this.state.value, animationConfig).start();\n    }\n    handleMoveShouldSetPanResponder() {\n        // Should we become active when the user moves a touch over the thumb?\n        if (!TRACK_STYLE) {\n            return true;\n        }\n        return false;\n    }\n    handlePanResponderGrant() {\n        this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n        this.fireChangeEvent('onSlidingStart');\n    }\n    handlePanResponderMove(_, gestureState) {\n        if (this.props.disabled) {\n            return;\n        }\n        this.setCurrentValue(this.getValue(gestureState));\n        this.fireChangeEvent('onValueChange');\n    }\n    handlePanResponderRequestEnd() {\n        // Should we allow another component to take over this pan?\n        return false;\n    }\n    handlePanResponderEnd(_, gestureState) {\n        if (this.props.disabled) {\n            return;\n        }\n        this.setCurrentValue(this.getValue(gestureState));\n        this.fireChangeEvent('onSlidingComplete');\n    }\n    thumbHitTest({ nativeEvent }) {\n        const thumbTouchRect = this.getThumbTouchRect();\n        return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n    handleStartShouldSetPanResponder(e /* gestureState: Object */) {\n        // Should we become active when the user presses down on the thumb?\n        if (!this.props.allowTouchTrack) {\n            return this.thumbHitTest(e);\n        }\n        this.setCurrentValue(this.getOnTouchValue(e));\n        this.fireChangeEvent('onValueChange');\n        return true;\n    }\n    fireChangeEvent(event) {\n        if (this.props[event]) {\n            this.props[event](this.getCurrentValue());\n        }\n    }\n    // get value of where some touched on slider.\n    getOnTouchValue({ nativeEvent }) {\n        const location = this.isVertical\n            ? nativeEvent.locationY\n            : nativeEvent.locationX;\n        return this.getValueForTouch(location);\n    }\n    getValueForTouch(location) {\n        const length = this.state.containerSize.width - this.state.thumbSize.width;\n        const ratio = location / length;\n        let newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n        if (this.props.step) {\n            newValue = Math.round(newValue / this.props.step) * this.props.step;\n        }\n        return getBoundedValue(newValue + this.props.minimumValue, this.props.maximumValue, this.props.minimumValue);\n    }\n    getTouchOverflowSize() {\n        const { thumbSize, allMeasured, containerSize } = this.state;\n        const { thumbTouchSize } = this.props;\n        const size = {};\n        if (allMeasured === true) {\n            size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n            size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n        }\n        return size;\n    }\n    getTouchOverflowStyle() {\n        const { width, height } = this.getTouchOverflowSize();\n        const touchOverflowStyle = {};\n        if (width !== undefined && height !== undefined) {\n            const verticalMargin = -height / 2;\n            touchOverflowStyle.marginTop = verticalMargin;\n            touchOverflowStyle.marginBottom = verticalMargin;\n            const horizontalMargin = -width / 2;\n            touchOverflowStyle.marginLeft = horizontalMargin;\n            touchOverflowStyle.marginRight = horizontalMargin;\n        }\n        if (this.props.debugTouchArea === true) {\n            touchOverflowStyle.backgroundColor = 'orange';\n            touchOverflowStyle.opacity = 0.5;\n        }\n        return touchOverflowStyle;\n    }\n    handleMeasure(name, x) {\n        const { width: layoutWidth, height: layoutHeight } = x.nativeEvent.layout;\n        const width = this.isVertical ? layoutHeight : layoutWidth;\n        const height = this.isVertical ? layoutWidth : layoutHeight;\n        const size = { width, height };\n        const storeName = `_${name}`;\n        const currentSize = this[storeName];\n        if (currentSize &&\n            width === currentSize.width &&\n            height === currentSize.height) {\n            return;\n        }\n        this[storeName] = size;\n        if (this._containerSize && this._trackSize && this._thumbSize) {\n            this.setState({\n                containerSize: this._containerSize,\n                trackSize: this._trackSize,\n                thumbSize: this._thumbSize,\n                allMeasured: true,\n            });\n        }\n    }\n    getValue(gestureState) {\n        const location = this._previousLeft +\n            (this.isVertical ? gestureState.dy : gestureState.dx);\n        return this.getValueForTouch(location);\n    }\n    getCurrentValue() {\n        return this.state.value.__getValue();\n    }\n    getRatio(value) {\n        return ((value - this.props.minimumValue) /\n            (this.props.maximumValue - this.props.minimumValue));\n    }\n    getThumbLeft(value) {\n        const ratio = this.getRatio(value);\n        return (ratio * (this.state.containerSize.width - this.state.thumbSize.width));\n    }\n    getThumbTouchRect() {\n        const { thumbSize, containerSize } = this.state;\n        const { thumbTouchSize } = this.props;\n        const touchOverflowSize = this.getTouchOverflowSize();\n        const height = touchOverflowSize.height / 2 +\n            (containerSize.height - thumbTouchSize.height) / 2;\n        const width = touchOverflowSize.width / 2 +\n            this.getThumbLeft(this.getCurrentValue()) +\n            (thumbSize.width - thumbTouchSize.width) / 2;\n        if (this.isVertical) {\n            return new Rect(height, width, thumbTouchSize.width, thumbTouchSize.height);\n        }\n        return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n    }\n    renderDebugThumbTouchRect(thumbLeft) {\n        const thumbTouchRect = this.getThumbTouchRect();\n        const positionStyle = {\n            left: thumbLeft,\n            top: thumbTouchRect.y,\n            width: thumbTouchRect.width,\n            height: thumbTouchRect.height,\n        };\n        return <Animated.View style={positionStyle} pointerEvents=\"none\"/>;\n    }\n    getMinimumTrackStyles(thumbStart) {\n        const { thumbSize, trackSize } = this.state;\n        const minimumTrackStyle = {\n            position: 'absolute',\n        };\n        if (this.isVertical) {\n            minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n            minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n        }\n        else {\n            minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n            minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n        }\n        return minimumTrackStyle;\n    }\n    getThumbPositionStyles(thumbStart) {\n        return [{ [this.isVertical ? 'translateY' : 'translateX']: thumbStart }];\n    }\n    render() {\n        const _a = this.props, { minimumValue, maximumValue, minimumTrackTintColor, maximumTrackTintColor, thumbTintColor, containerStyle, style, trackStyle, thumbStyle, thumbProps, debugTouchArea } = _a, other = __rest(_a, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"thumbProps\", \"debugTouchArea\"]);\n        const { value, containerSize, thumbSize, allMeasured } = this.state;\n        const mainStyles = containerStyle || styles;\n        const appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n        const thumbStart = value.interpolate({\n            inputRange: [minimumValue, maximumValue],\n            outputRange: [0, containerSize.width - thumbSize.width],\n        });\n        const valueVisibleStyle = {};\n        if (!allMeasured) {\n            valueVisibleStyle.height = 0;\n            valueVisibleStyle.width = 0;\n        }\n        const minimumTrackStyle = Object.assign(Object.assign(Object.assign({}, this.getMinimumTrackStyles(thumbStart)), { backgroundColor: minimumTrackTintColor }), valueVisibleStyle);\n        const touchOverflowStyle = this.getTouchOverflowStyle();\n        return (<View {...other} style={StyleSheet.flatten([\n                this.isVertical\n                    ? mainStyles.containerVertical\n                    : mainStyles.containerHorizontal,\n                style,\n            ])} onLayout={this.measureContainer}>\n        <View style={StyleSheet.flatten([\n                mainStyles.track,\n                this.isVertical\n                    ? mainStyles.trackVertical\n                    : mainStyles.trackHorizontal,\n                appliedTrackStyle,\n                { backgroundColor: maximumTrackTintColor },\n            ])} onLayout={this.measureTrack}/>\n        <Animated.View style={StyleSheet.flatten([\n                mainStyles.track,\n                this.isVertical\n                    ? mainStyles.trackVertical\n                    : mainStyles.trackHorizontal,\n                appliedTrackStyle,\n                minimumTrackStyle,\n            ])}/>\n        <SliderThumb isVisible={allMeasured} onLayout={this.measureThumb.bind(this)} style={thumbStyle} color={thumbTintColor} start={thumbStart} vertical={this.isVertical} {...thumbProps}/>\n        <View style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])} {...this.panResponder.panHandlers}>\n          {debugTouchArea === true &&\n                this.renderDebugThumbTouchRect(thumbStart)}\n        </View>\n      </View>);\n    }\n}\nconst SliderThumb = (_a) => {\n    var { Component, isVisible, onLayout, style, start, color, vertical } = _a, props = __rest(_a, [\"Component\", \"isVisible\", \"onLayout\", \"style\", \"start\", \"color\", \"vertical\"]);\n    const ThumbComponent = Component || Animated.View;\n    const axis = vertical ? 'translateY' : 'translateX';\n    const thumbPosition = [{ [axis]: start }];\n    const styleTransform = (style && style.transform) || [];\n    const visibleStyle = isVisible ? {} : { height: 0, width: 0 };\n    return (<ThumbComponent testID=\"sliderThumb\" onLayout={onLayout} style={StyleSheet.flatten([\n            Object.assign({ backgroundColor: color, transform: [...thumbPosition, ...styleTransform] }, visibleStyle),\n            styles.thumb,\n            style,\n        ])} {...props}/>);\n};\nSlider.defaultProps = {\n    value: 0,\n    minimumValue: 0,\n    maximumValue: 1,\n    step: 0,\n    minimumTrackTintColor: '#3f3f3f',\n    maximumTrackTintColor: '#b3b3b3',\n    allowTouchTrack: false,\n    thumbTintColor: 'red',\n    thumbTouchSize: { width: THUMB_SIZE, height: THUMB_SIZE },\n    debugTouchArea: false,\n    animationType: 'timing',\n    orientation: 'horizontal',\n};\nconst styles = StyleSheet.create({\n    containerHorizontal: {\n        height: 40,\n        justifyContent: 'center',\n    },\n    containerVertical: {\n        width: 40,\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    track: {\n        borderRadius: TRACK_SIZE / 2,\n    },\n    trackHorizontal: {\n        height: TRACK_SIZE,\n    },\n    trackVertical: {\n        flex: 1,\n        width: TRACK_SIZE,\n    },\n    thumb: {\n        position: 'absolute',\n        width: THUMB_SIZE,\n        height: THUMB_SIZE,\n        borderRadius: THUMB_SIZE / 2,\n    },\n    touchArea: {\n        position: 'absolute',\n        backgroundColor: 'transparent',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n    debugThumbTouchArea: {\n        position: 'absolute',\n        backgroundColor: 'green',\n        opacity: 0.5,\n    },\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');\n"]},"metadata":{},"sourceType":"module"}